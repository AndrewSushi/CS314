a) The rate will be 1/4 since the first access will always be a miss because the cache is always empty. And since it will have to retrieve 64 Bytes, and then the following 3 accesses should be hits since the structs are saved. However, since we are incrementing j and the j is the rows, that means that the cache will be reset each time you iterate causing the miss rate to be 1/4
b) However, the rate for B will be 1/8 since when you increment J and you're on the columns, then all the cache will still be there so that means you will have one cache store that will be loaded once every 8 array access. Since the second struct will be stored causing the p[i][j].r , when j is odd, to beb already loaded.
